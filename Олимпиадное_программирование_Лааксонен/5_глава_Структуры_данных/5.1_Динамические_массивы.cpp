#include <iostream>
#include <vector>
#include <deque>
#include <stack>
#include <queue>
using namespace std;

int main(){
    //Вектор

    vector<int> v = {2, 3, 3, 5, 7, 8, 8, 8};
    //функции вектора
    //v.begin() - итератор на первый элемент вектора; v.end() - на итератор на позицию ЗА последним элементом вектора
    cout << *v.begin() << '\n'; //вывод первого элемента вектора
    //reverse(v.begin(), v.end() // разворот вектора
    //random_shuffle(v.begin(), v.end()) // перемешивание элементов в случайном порядке
    auto a = lower_bound(v.begin(), v.end(), 5); //итератор на первый элемент отсортированного диапазона, не меньше 5
    auto b = upper_bound(v.begin(), v.end(), 5); //итератор на первый элемент отсортированного диапазона, не больше 5
    //В функциях lower_bound() и upper_bound() используется бинарный поиск, поэтому необходимо чтобы диапазон был отсортирован
    //Если элемент не найден, будет возвращен итератор на позицию ПОСЛЕ последнего элемента

    //Следующий код создает вектор, создержащий все уникальные элементы изначального вектора в отсортированном порядке
    sort(v.begin(),v.end());
    v.erase(unique(v.begin(),v.end()),v.end());

    //Дек

    //В деке допускаются эффективные операции с двух сторон

    deque<int> d;
    d.push_back(5); // [5]
    d.push_back(2); // [5,2]
    d.push_front(3); // [3,5,2]
    d.pop_back(); // [3,5]
    d.pop_front(); // [5]

    //Стек

    stack<int> s;
    s.push(2); // [2]
    s.push(5); // [2,5]
    cout << s.top() << "\n"; // 5
    s.pop(); // [2]
    cout << s.top() << "\n"; // 2

    //Очередь

    queue<int> q;
    q.push(2); // [2]
    q.push(5); // [2,5]
    cout << q.front() << "\n"; // 2
    q.pop(); // [5]
    cout << q.back() << "\n"; // 5

}
